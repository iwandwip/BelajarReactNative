import * as XLSX from 'xlsx';
import jsPDF from 'jspdf';
import 'jspdf-autotable';
import * as FileSystem from 'expo-file-system';
import * as Sharing from 'expo-sharing';

const formatDateForFilename = () => {
  const now = new Date();
  const year = now.getFullYear();
  const month = String(now.getMonth() + 1).padStart(2, '0');
  const day = String(now.getDate()).padStart(2, '0');
  const hours = String(now.getHours()).padStart(2, '0');
  const minutes = String(now.getMinutes()).padStart(2, '0');
  return `${year}-${month}-${day}_${hours}-${minutes}`;
};

const formatDataForExport = (data) => {
  return data.map(item => ({
    DateTime: new Date(item.datetime).toLocaleString(),
    'Value 1': Number(item.value1).toFixed(2),
    'Value 2': Number(item.value2).toFixed(2),
    Status: item.status
  }));
};

export const exportToExcel = async (data, userProfile) => {
  try {
    if (!data || data.length === 0) {
      throw new Error('No data to export');
    }

    const formattedData = formatDataForExport(data);
    
    const worksheet = XLSX.utils.json_to_sheet(formattedData);
    
    const columnWidths = [
      { wch: 20 },
      { wch: 12 },
      { wch: 12 },
      { wch: 15 }
    ];
    worksheet['!cols'] = columnWidths;

    const workbook = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(workbook, worksheet, 'Data Export');

    const excelBuffer = XLSX.write(workbook, { 
      type: 'base64', 
      bookType: 'xlsx' 
    });

    const timestamp = formatDateForFilename();
    const fileName = `data_export_${timestamp}.xlsx`;
    const fileUri = `${FileSystem.documentDirectory}${fileName}`;

    await FileSystem.writeAsStringAsync(fileUri, excelBuffer, {
      encoding: FileSystem.EncodingType.Base64,
    });

    const isAvailable = await Sharing.isAvailableAsync();
    if (isAvailable) {
      await Sharing.shareAsync(fileUri, {
        mimeType: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
        dialogTitle: 'Export Data to Excel'
      });
    }

    return { success: true, fileName };
  } catch (error) {
    console.error('Excel export error:', error);
    return { success: false, error: error.message };
  }
};

export const exportToPDF = async (data, userProfile) => {
  try {
    if (!data || data.length === 0) {
      throw new Error('No data to export');
    }

    const doc = new jsPDF();
    
    doc.setFontSize(16);
    doc.text('Data Export Report', 20, 20);
    
    doc.setFontSize(10);
    const exportDate = new Date().toLocaleDateString();
    doc.text(`Export Date: ${exportDate}`, 20, 30);
    
    if (userProfile?.name) {
      doc.text(`User: ${userProfile.name}`, 20, 35);
    }

    const tableData = data.map(item => [
      new Date(item.datetime).toLocaleString(),
      Number(item.value1).toFixed(2),
      Number(item.value2).toFixed(2),
      item.status
    ]);

    doc.autoTable({
      head: [['Date Time', 'Value 1', 'Value 2', 'Status']],
      body: tableData,
      startY: 45,
      theme: 'striped',
      styles: {
        fontSize: 8,
        cellPadding: 2,
      },
      headStyles: {
        fillColor: [245, 0, 87],
        textColor: 255,
        fontStyle: 'bold'
      },
      alternateRowStyles: {
        fillColor: [249, 249, 249]
      },
      columnStyles: {
        0: { cellWidth: 40 },
        1: { cellWidth: 25, halign: 'right' },
        2: { cellWidth: 25, halign: 'right' },
        3: { cellWidth: 30, halign: 'center' }
      }
    });

    const finalY = doc.lastAutoTable.finalY || 45;
    doc.setFontSize(8);
    doc.text(`Total Records: ${data.length}`, 20, finalY + 15);
    
    const avgValue1 = data.reduce((sum, item) => sum + Number(item.value1), 0) / data.length;
    const avgValue2 = data.reduce((sum, item) => sum + Number(item.value2), 0) / data.length;
    
    doc.text(`Average Value 1: ${avgValue1.toFixed(2)}`, 20, finalY + 20);
    doc.text(`Average Value 2: ${avgValue2.toFixed(2)}`, 20, finalY + 25);

    doc.setFontSize(7);
    doc.text('Generated by Firebase Auth Template', 20, doc.internal.pageSize.height - 10);

    const pdfBase64 = doc.output('datauristring').split(',')[1];

    const timestamp = formatDateForFilename();
    const fileName = `data_export_${timestamp}.pdf`;
    const fileUri = `${FileSystem.documentDirectory}${fileName}`;

    await FileSystem.writeAsStringAsync(fileUri, pdfBase64, {
      encoding: FileSystem.EncodingType.Base64,
    });

    const isAvailable = await Sharing.isAvailableAsync();
    if (isAvailable) {
      await Sharing.shareAsync(fileUri, {
        mimeType: 'application/pdf',
        dialogTitle: 'Export Data to PDF'
      });
    }

    return { success: true, fileName };
  } catch (error) {
    console.error('PDF export error:', error);
    return { success: false, error: error.message };
  }
};